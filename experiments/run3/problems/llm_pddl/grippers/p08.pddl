

(define (domain transport-balls)
  (:requirements :strips :typing)
  (:types robot room ball - object)
  (:predicates (at ?r - robot ?l - room)
               (holding ?r - robot ?b - ball)
               (free ?r - robot))
  (:action move
    :parameters (?r - robot ?l1 ?l2 - room)
    :precondition (and (at ?r ?l1) (not (at ?r ?l2)))
    :effect (and (at ?r ?l2) (not (at ?r ?l1))))
  (:action pick
    :parameters (?r - robot ?b - ball ?l - room)
    :precondition (and (at ?r ?l) (free ?r) (not (holding ?r ?b)))
    :effect (and (holding ?r ?b) (not (free ?r))))
  (:action drop
    :parameters (?r - robot ?b - ball ?l - room)
    :precondition (and (holding ?r ?b) (at ?r ?l))
    :effect (and (free ?r) (not (holding ?r ?b)))))

(define (problem transport-balls)
  (:domain transport-balls)
  (:objects robot1 robot2 robot3 - robot
            room1 room2 - room
            ball1 ball2 ball3 ball4 ball5 - ball)
  (:init (at robot3 room2)
         (at robot2 room1)
         (at robot1 room2)
         (free robot1)
         (free robot2)
         (free robot3)
         (not (holding robot1 ball1))
         (not (holding robot1 ball2))
         (not (holding robot1 ball3))
         (not (holding robot1 ball4))
         (not (holding robot1 ball5))
         (not (holding robot2 ball1))
         (not (holding robot2 ball2))
         (not (holding robot2 ball3))
         (not (holding robot2 ball4))
         (not (holding robot2 ball5))
         (not (holding robot3 ball1))
         (not (holding robot3 ball2))
         (not (holding robot3 ball3))
         (not (holding robot3 ball4))
         (not (holding robot3 ball5)))
  (:goal (and (at ball1 room1)
              (at ball2 room1)
              (at ball3 room2)
              (at ball4 room1)
              (at ball5 room1))))