

(define (domain transport-balls)
  (:requirements :strips :typing)
  (:types robot room ball - object)
  (:predicates (at ?r - robot ?l - room)
               (holding ?r - robot ?b - ball)
               (free ?r - robot))
  (:action move
    :parameters (?r - robot ?l1 ?l2 - room)
    :precondition (and (at ?r ?l1) (not (at ?r ?l2)))
    :effect (and (at ?r ?l2) (not (at ?r ?l1))))
  (:action pick
    :parameters (?r - robot ?b - ball ?l - room)
    :precondition (and (at ?r ?l) (free ?r) (not (holding ?r ?b)) (at ?b ?l))
    :effect (and (holding ?r ?b) (not (at ?b ?l)) (not (free ?r))))
  (:action drop
    :parameters (?r - robot ?b - ball ?l - room)
    :precondition (and (at ?r ?l) (holding ?r ?b))
    :effect (and (at ?b ?l) (not (holding ?r ?b)) (free ?r))))

(define (problem transport-balls)
  (:domain transport-balls)
  (:objects robot1 robot2 robot3 robot4 room1 room2 room3 ball1 ball2 ball3 ball4 ball5 ball6 - ball)
  (:init (at robot1 room3)
         (at robot2 room3)
         (at robot3 room3)
         (at robot4 room1)
         (at ball2 room2)
         (at ball4 room3)
         (at ball3 room1)
         (at ball6 room3)
         (at ball1 room2)
         (at ball5 room3)
         (free robot1)
         (free robot2)
         (free robot3)
         (free robot4))
  (:goal (and (at ball1 room1)
              (at ball2 room1)
              (at ball3 room2)
              (at ball4 room3)
              (at ball5 room3)
              (at ball6 room3))))